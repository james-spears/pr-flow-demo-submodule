name: Pre-release
on:
  push:
    branches: [staging]
  workflow_dispatch:

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache npm
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Config git
        run: |
          git config --global user.name 'ðŸ¤–'
          git config --global user.email 'ðŸ¤–'
      # - name: Bump version
      #   id: version-bump
      #   uses: actions/checkout@v3
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version
        run: echo "version=$(npm version prerelease -m 'Bump version v%s [skip ci]')" >> $GITHUB_ENV

      - name: Push code
        run: |
          git push
          git push --tags

      - name: Install deps
        run: npm ci

      - name: Build code
        run: npm run build

      - name: Archive code
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist
            package*.json

  create-release:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Set version
        id: vars
        shell: bash
        run: |
          git fetch -a
          echo "RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Create release
        uses: "actions/github-script@v6"
        env:
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: process.env.RELEASE_TAG.includes('-') ? true : false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
            } catch (error) {
              core.setFailed(error.message);
            }

  deploy:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Staging deploy
        run: |
          echo "Staging Deploy Goes Here"
